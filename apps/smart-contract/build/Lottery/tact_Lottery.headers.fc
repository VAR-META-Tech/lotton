;;
;; Header files for Lottery
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_prepare_random
() __tact_prepare_random() impure inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_int
(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_get_int_int
int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline;

;; __tact_dict_get_uint_uint
int __tact_dict_get_uint_uint(cell d, int kl, int k, int vl) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_slice_neq
int __tact_slice_neq(slice a, slice b) inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_string
tuple __tact_string_builder_start_string() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_end_slice
slice __tact_string_builder_end_slice(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; __tact_int_to_string
slice __tact_int_to_string(int src) inline_ref;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Pool$_store
builder $Pool$_store(builder build_0, (int, slice, cell, int, int, int, int, cell) v) inline_ref;

;; $Pool$_store_cell
cell $Pool$_store_cell((int, slice, cell, int, int, int, int, cell) v) inline;

;; $Pool$_load
(slice, ((int, slice, cell, int, int, int, int, cell))) $Pool$_load(slice sc_0) inline_ref;

;; $Pool$_as_optional
tuple $Pool$_as_optional((int, slice, cell, int, int, int, int, cell) v) inline;

;; $Pool$_load_opt
tuple $Pool$_load_opt(cell cl) inline;

;; $RoundConfig$_store
builder $RoundConfig$_store(builder build_0, (int, int, int, int, int, int) v) inline_ref;

;; $RoundConfig$_store_cell
cell $RoundConfig$_store_cell((int, int, int, int, int, int) v) inline;

;; $RoundConfig$_load
(slice, ((int, int, int, int, int, int))) $RoundConfig$_load(slice sc_0) inline_ref;

;; $RoundConfig$_as_optional
tuple $RoundConfig$_as_optional((int, int, int, int, int, int) v) inline;

;; $RoundConfig$_load_opt
tuple $RoundConfig$_load_opt(cell cl) inline;

;; $TicketPayoutResponse$_store
builder $TicketPayoutResponse$_store(builder build_0, (slice) v) inline;

;; $TicketPayoutResponse$_store_cell
cell $TicketPayoutResponse$_store_cell((slice) v) inline;

;; $TicketPayoutResponse$_load
(slice, ((slice))) $TicketPayoutResponse$_load(slice sc_0) inline;

;; $TicketPayoutResponse$_as_optional
tuple $TicketPayoutResponse$_as_optional((slice) v) inline;

;; $TicketPayoutResponse$_load_opt
tuple $TicketPayoutResponse$_load_opt(cell cl) inline;

;; $UserTicket$_store
builder $UserTicket$_store(builder build_0, (cell) v) inline;

;; $UserTicket$_store_cell
cell $UserTicket$_store_cell((cell) v) inline;

;; $UserTicket$_load
(slice, ((cell))) $UserTicket$_load(slice sc_0) inline;

;; $UserTicket$_as_optional
tuple $UserTicket$_as_optional((cell) v) inline;

;; $UserTicket$_load_opt
tuple $UserTicket$_load_opt(cell cl) inline;

;; $RoundTicket$_store
builder $RoundTicket$_store(builder build_0, (cell) v) inline;

;; $RoundTicket$_store_cell
cell $RoundTicket$_store_cell((cell) v) inline;

;; $RoundTicket$_load
(slice, ((cell))) $RoundTicket$_load(slice sc_0) inline;

;; $RoundTicket$_as_optional
tuple $RoundTicket$_as_optional((cell) v) inline;

;; $RoundTicket$_load_opt
tuple $RoundTicket$_load_opt(cell cl) inline;

;; $ClaimInfo$_store
builder $ClaimInfo$_store(builder build_0, (cell) v) inline;

;; $ClaimInfo$_store_cell
cell $ClaimInfo$_store_cell((cell) v) inline;

;; $ClaimInfo$_load
(slice, ((cell))) $ClaimInfo$_load(slice sc_0) inline;

;; $ClaimInfo$_as_optional
tuple $ClaimInfo$_as_optional((cell) v) inline;

;; $ClaimInfo$_load_opt
tuple $ClaimInfo$_load_opt(cell cl) inline;

;; $UserClaim$_store
builder $UserClaim$_store(builder build_0, (cell) v) inline;

;; $UserClaim$_store_cell
cell $UserClaim$_store_cell((cell) v) inline;

;; $UserClaim$_load
(slice, ((cell))) $UserClaim$_load(slice sc_0) inline;

;; $UserClaim$_as_optional
tuple $UserClaim$_as_optional((cell) v) inline;

;; $UserClaim$_load_opt
tuple $UserClaim$_load_opt(cell cl) inline;

;; $Result$_store
builder $Result$_store(builder build_0, (cell) v) inline;

;; $Result$_store_cell
cell $Result$_store_cell((cell) v) inline;

;; $Result$_load
(slice, ((cell))) $Result$_load(slice sc_0) inline;

;; $Result$_as_optional
tuple $Result$_as_optional((cell) v) inline;

;; $Result$_load_opt
tuple $Result$_load_opt(cell cl) inline;

;; $CreatePool$_load
(slice, ((slice, int, int, int, int, int, int, cell))) $CreatePool$_load(slice sc_0) inline_ref;

;; $Claim$_load
(slice, ((int, int, int, slice, slice))) $Claim$_load(slice sc_0) inline;

;; $WinningNumbersDrawnEvent$_store
builder $WinningNumbersDrawnEvent$_store(builder build_0, (int, int, int) v) inline;

;; $WinningNumbersDrawnEvent$_store_cell
cell $WinningNumbersDrawnEvent$_store_cell((int, int, int) v) inline;

;; $BuyTicket$_load
(slice, ((int, int, int))) $BuyTicket$_load(slice sc_0) inline;

;; $DrawWinningNumbers$_load
(slice, ((int, int, slice))) $DrawWinningNumbers$_load(slice sc_0) inline;

;; $SetAdmin$_load
(slice, ((slice))) $SetAdmin$_load(slice sc_0) inline;

;; $SetPublicKey$_load
(slice, ((int))) $SetPublicKey$_load(slice sc_0) inline;

;; $SetClaimFeePercent$_load
(slice, ((int))) $SetClaimFeePercent$_load(slice sc_0) inline;

;; $TransferFund$_load
(slice, ((slice, int))) $TransferFund$_load(slice sc_0) inline;

;; $PoolCreatedEvent$_store
builder $PoolCreatedEvent$_store(builder build_0, (int, int, int, int, int, int, int, cell, slice, cell) v) inline_ref;

;; $PoolCreatedEvent$_store_cell
cell $PoolCreatedEvent$_store_cell((int, int, int, int, int, int, int, cell, slice, cell) v) inline;

;; $TicketBoughtEvent$_store
builder $TicketBoughtEvent$_store(builder build_0, (int, int, int, slice, slice) v) inline;

;; $TicketBoughtEvent$_store_cell
cell $TicketBoughtEvent$_store_cell((int, int, int, slice, slice) v) inline;

;; $ClaimedEvent$_store
builder $ClaimedEvent$_store(builder build_0, (int, int, int, slice) v) inline;

;; $ClaimedEvent$_store_cell
cell $ClaimedEvent$_store_cell((int, int, int, slice) v) inline;

;; $Lottery$_store
builder $Lottery$_store(builder build_0, (slice, cell, cell, int, cell, cell, cell, int, cell, int) v) inline;

;; $Lottery$_load
(slice, ((slice, cell, cell, int, cell, cell, cell, int, cell, int))) $Lottery$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $Pool$_get_rounds
_ $Pool$_get_rounds((int, slice, cell, int, int, int, int, cell) v) inline;

;; $Pool$_not_null
((int, slice, cell, int, int, int, int, cell)) $Pool$_not_null(tuple v) inline;

;; $Pool$_to_tuple
tuple $Pool$_to_tuple(((int, slice, cell, int, int, int, int, cell)) v) inline;

;; $Pool$_to_opt_tuple
tuple $Pool$_to_opt_tuple(tuple v) inline;

;; $Pool$_to_opt_external
tuple $Pool$_to_opt_external(tuple v) inline;

;; $RoundConfig$_not_null
((int, int, int, int, int, int)) $RoundConfig$_not_null(tuple v) inline;

;; $RoundConfig$_to_tuple
tuple $RoundConfig$_to_tuple(((int, int, int, int, int, int)) v) inline;

;; $RoundConfig$_to_opt_tuple
tuple $RoundConfig$_to_opt_tuple(tuple v) inline;

;; $RoundConfig$_to_opt_external
tuple $RoundConfig$_to_opt_external(tuple v) inline;

;; $TicketPayoutResponse$_not_null
((slice)) $TicketPayoutResponse$_not_null(tuple v) inline;

;; $TicketPayoutResponse$_to_tuple
tuple $TicketPayoutResponse$_to_tuple(((slice)) v) inline;

;; $TicketPayoutResponse$_to_opt_tuple
tuple $TicketPayoutResponse$_to_opt_tuple(tuple v) inline;

;; $TicketPayoutResponse$_to_opt_external
tuple $TicketPayoutResponse$_to_opt_external(tuple v) inline;

;; $UserTicket$_get_users
_ $UserTicket$_get_users((cell) v) inline;

;; $UserTicket$_not_null
((cell)) $UserTicket$_not_null(tuple v) inline;

;; $UserTicket$_to_external
(cell) $UserTicket$_to_external(((cell)) v) inline;

;; $RoundTicket$_get_rounds
_ $RoundTicket$_get_rounds((cell) v) inline;

;; $RoundTicket$_not_null
((cell)) $RoundTicket$_not_null(tuple v) inline;

;; $ClaimInfo$_get_info
_ $ClaimInfo$_get_info((cell) v) inline;

;; $ClaimInfo$_not_null
((cell)) $ClaimInfo$_not_null(tuple v) inline;

;; $UserClaim$_get_user
_ $UserClaim$_get_user((cell) v) inline;

;; $UserClaim$_not_null
((cell)) $UserClaim$_not_null(tuple v) inline;

;; $UserClaim$_to_tuple
tuple $UserClaim$_to_tuple(((cell)) v) inline;

;; $UserClaim$_to_opt_tuple
tuple $UserClaim$_to_opt_tuple(tuple v) inline;

;; $UserClaim$_to_opt_external
tuple $UserClaim$_to_opt_external(tuple v) inline;

;; $Result$_get_rounds
_ $Result$_get_rounds((cell) v) inline;

;; $Result$_not_null
((cell)) $Result$_not_null(tuple v) inline;

;; $Result$_to_tuple
tuple $Result$_to_tuple(((cell)) v) inline;

;; $Result$_to_opt_tuple
tuple $Result$_to_opt_tuple(tuple v) inline;

;; $Result$_to_opt_external
tuple $Result$_to_opt_external(tuple v) inline;

;; $Lottery$_contract_init
(slice, cell, cell, int, cell, cell, cell, int, cell, int) $Lottery$_contract_init() impure inline_ref;

;; $Lottery$_contract_load
(slice, cell, cell, int, cell, cell, cell, int, cell, int) $Lottery$_contract_load() impure inline_ref;

;; $Lottery$_contract_store
() $Lottery$_contract_store((slice, cell, cell, int, cell, cell, cell, int, cell, int) v) impure inline;

;; $global_random
int $global_random(int $min, int $max) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $Lottery$_fun_isAdmin
((slice, cell, cell, int, cell, cell, cell, int, cell, int), int) $Lottery$_fun_isAdmin((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, slice $address) impure inline_ref;

;; $Lottery$_fun_requireOwnerOrAdmin
((slice, cell, cell, int, cell, cell, cell, int, cell, int), ()) $Lottery$_fun_requireOwnerOrAdmin((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self) impure inline_ref;

;; $Lottery$_fun_requireOwner
((slice, cell, cell, int, cell, cell, cell, int, cell, int), ()) $Lottery$_fun_requireOwner((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self) impure inline_ref;

;; $Lottery$_fun_setAdmin
((slice, cell, cell, int, cell, cell, cell, int, cell, int), ()) $Lottery$_fun_setAdmin((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, slice $admin) impure inline_ref;

;; $Pool$_constructor_poolId_creator_rounds_startTime_endTime_sequence_active_prizes
((int, slice, cell, int, int, int, int, cell)) $Pool$_constructor_poolId_creator_rounds_startTime_endTime_sequence_active_prizes(int $poolId, slice $creator, cell $rounds, int $startTime, int $endTime, int $sequence, int $active, cell $prizes) inline;

;; $RoundTicket$_constructor_rounds
((cell)) $RoundTicket$_constructor_rounds(cell $rounds) inline;

;; $RoundConfig$_constructor_roundId_poolId_ticketPrice_startTime_endTime_active
((int, int, int, int, int, int)) $RoundConfig$_constructor_roundId_poolId_ticketPrice_startTime_endTime_active(int $roundId, int $poolId, int $ticketPrice, int $startTime, int $endTime, int $active) inline;

;; $UserTicket$_constructor_users
((cell)) $UserTicket$_constructor_users(cell $users) inline;

;; $PoolCreatedEvent$_constructor_poolId_ticketPrice_initialRounds_startTime_endTime_active_sequence_rounds_creator_prizes
((int, int, int, int, int, int, int, cell, slice, cell)) $PoolCreatedEvent$_constructor_poolId_ticketPrice_initialRounds_startTime_endTime_active_sequence_rounds_creator_prizes(int $poolId, int $ticketPrice, int $initialRounds, int $startTime, int $endTime, int $active, int $sequence, cell $rounds, slice $creator, cell $prizes) inline;

;; $Lottery$_fun_verifyPoolPrizes
((slice, cell, cell, int, cell, cell, cell, int, cell, int), int) $Lottery$_fun_verifyPoolPrizes((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, cell $prizes) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Lottery$_fun_forward
((slice, cell, cell, int, cell, cell, cell, int, cell, int), ()) $Lottery$_fun_forward((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Lottery$_fun_reply
((slice, cell, cell, int, cell, cell, cell, int, cell, int), ()) $Lottery$_fun_reply((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, cell $body) impure inline;

;; $Lottery$_fun_createPool
((slice, cell, cell, int, cell, cell, cell, int, cell, int), ()) $Lottery$_fun_createPool((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, int $initialRounds, int $sequence, (int, int, int, int, int, int) $config, cell $prizes) impure inline_ref;

;; $Lottery$_fun_asciiToChar
((slice, cell, cell, int, cell, cell, cell, int, cell, int), slice) $Lottery$_fun_asciiToChar((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, int $ascii) impure inline_ref;

;; $RandomTicketResponse$_constructor_ASCIINumber_ticket
((int, slice)) $RandomTicketResponse$_constructor_ASCIINumber_ticket(int $ASCIINumber, slice $ticket) inline;

;; $Lottery$_fun_generateRandomASCIIString
((slice, cell, cell, int, cell, cell, cell, int, cell, int), (int, slice)) $Lottery$_fun_generateRandomASCIIString((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, int $length) impure inline_ref;

;; $Ticket$_constructor_ticket_ticketNumber_owner
((slice, int, slice)) $Ticket$_constructor_ticket_ticketNumber_owner(slice $ticket, int $ticketNumber, slice $owner) inline;

;; $TicketPayoutResponse$_constructor_ticket
((slice)) $TicketPayoutResponse$_constructor_ticket(slice $ticket) inline;

;; $Lottery$_fun_createTicket
((slice, cell, cell, int, cell, cell, cell, int, cell, int), slice) $Lottery$_fun_createTicket((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, slice $user, int $poolId, int $roundId, int $quantity) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline;

;; $TicketBoughtEvent$_constructor_roundId_poolId_quantity_buyer_tickets
((int, int, int, slice, slice)) $TicketBoughtEvent$_constructor_roundId_poolId_quantity_buyer_tickets(int $roundId, int $poolId, int $quantity, slice $buyer, slice $tickets) inline;

;; $Lottery$_fun_buyTicket
((slice, cell, cell, int, cell, cell, cell, int, cell, int), ()) $Lottery$_fun_buyTicket((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, int $poolId, int $roundId, int $quantity) impure inline_ref;

;; $Result$_constructor_rounds
((cell)) $Result$_constructor_rounds(cell $rounds) inline;

;; $WinningNumbersDrawnEvent$_constructor_poolId_roundId_winningNumber
((int, int, int)) $WinningNumbersDrawnEvent$_constructor_poolId_roundId_winningNumber(int $poolId, int $roundId, int $winningNumber) inline;

;; $Lottery$_fun_roundById
((slice, cell, cell, int, cell, cell, cell, int, cell, int), tuple) $Lottery$_fun_roundById((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, int $poolId, int $roundId) impure inline_ref;

;; $Lottery$_fun_drawWinningNumbers
((slice, cell, cell, int, cell, cell, cell, int, cell, int), ()) $Lottery$_fun_drawWinningNumbers((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, int $poolId, int $roundId, slice $latestTxHash) impure inline_ref;

;; $Lottery$_fun_getMessageHash
((slice, cell, cell, int, cell, cell, cell, int, cell, int), int) $Lottery$_fun_getMessageHash((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, int $poolId, int $roundId, int $amount, slice $receiver) impure inline_ref;

;; $UserClaim$_constructor_user
((cell)) $UserClaim$_constructor_user(cell $user) inline;

;; $ClaimInfo$_constructor_info
((cell)) $ClaimInfo$_constructor_info(cell $info) inline;

;; $SendParameters$_constructor_to_bounce_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode_body(slice $to, int $bounce, int $value, int $mode, cell $body) inline;

;; $ClaimedEvent$_constructor_poolId_roundId_amount_receiver
((int, int, int, slice)) $ClaimedEvent$_constructor_poolId_roundId_amount_receiver(int $poolId, int $roundId, int $amount, slice $receiver) inline;

;; $Lottery$_fun_claimData
((slice, cell, cell, int, cell, cell, cell, int, cell, int), tuple) $Lottery$_fun_claimData((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, int $poolId, int $roundId) impure inline_ref;

;; $Lottery$_fun_isClaim
((slice, cell, cell, int, cell, cell, cell, int, cell, int), int) $Lottery$_fun_isClaim((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, int $poolId, int $roundId, slice $receiver) impure inline_ref;

;; $Lottery$_fun_claimPrize
((slice, cell, cell, int, cell, cell, cell, int, cell, int), ()) $Lottery$_fun_claimPrize((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, (int, int, int, slice, slice) $msg) impure inline_ref;

;; $Lottery$_fun_admins
((slice, cell, cell, int, cell, cell, cell, int, cell, int), cell) $Lottery$_fun_admins((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self) impure inline_ref;

;; $Lottery$_fun_currentPool
((slice, cell, cell, int, cell, cell, cell, int, cell, int), cell) $Lottery$_fun_currentPool((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self) impure inline_ref;

;; $Lottery$_fun_poolById
((slice, cell, cell, int, cell, cell, cell, int, cell, int), tuple) $Lottery$_fun_poolById((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, int $poolId) impure inline_ref;

;; $Lottery$_fun_usersTicket
((slice, cell, cell, int, cell, cell, cell, int, cell, int), (cell)) $Lottery$_fun_usersTicket((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, int $poolId, int $roundId) impure inline_ref;

;; $Lottery$_fun_userTicketByAddress
((slice, cell, cell, int, cell, cell, cell, int, cell, int), tuple) $Lottery$_fun_userTicketByAddress((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, int $poolId, int $roundId, slice $user) impure inline_ref;

;; $Lottery$_fun_resultByRound
((slice, cell, cell, int, cell, cell, cell, int, cell, int), int) $Lottery$_fun_resultByRound((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, int $poolId, int $roundId) impure inline_ref;

;; $Lottery$_fun_resultByPool
((slice, cell, cell, int, cell, cell, cell, int, cell, int), tuple) $Lottery$_fun_resultByPool((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, int $poolId) impure inline_ref;

;; $Lottery$_fun_publicKey
((slice, cell, cell, int, cell, cell, cell, int, cell, int), int) $Lottery$_fun_publicKey((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self) impure inline_ref;

;; $Lottery$_fun_contractBalance
((slice, cell, cell, int, cell, cell, cell, int, cell, int), int) $Lottery$_fun_contractBalance((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self) impure inline_ref;

;; $Lottery$_fun_claimFeePercent
((slice, cell, cell, int, cell, cell, cell, int, cell, int), int) $Lottery$_fun_claimFeePercent((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self) impure inline_ref;

;; $Lottery$_fun_notify
((slice, cell, cell, int, cell, cell, cell, int, cell, int), ()) $Lottery$_fun_notify((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self, cell $body) impure inline;

;; $Lottery$_fun_owner
((slice, cell, cell, int, cell, cell, cell, int, cell, int), slice) $Lottery$_fun_owner((slice, cell, cell, int, cell, cell, cell, int, cell, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_bounce_value
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value(slice $to, int $bounce, int $value) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
